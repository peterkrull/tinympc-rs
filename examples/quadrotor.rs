use nalgebra::{matrix, vector, SMatrix, SVector};
use tinympc_rs::{constraint::{BoxFixed, DynConstraint, Project}, TinyMpc};

/*

    This example is based off the following TinyMPC example
    https://github.com/TinyMPC/TinyMPC/blob/main/examples/example_quadrotor_hovering.cpp

*/

type Float = f32;

const HX: usize = 40;
const HU: usize = 30;

fn main() {
    let mut mpc = TinyMpc::<12, 4, HX, HU, Float>::new(A, B, Q, R, RHO).unwrap();

    // Configure settings
    mpc.config.do_check = 1;
    mpc.config.max_iter = 20;

    // Constant reference through entire horizon
    let mut xref = SMatrix::<Float, 12, HX>::zeros();

    // Dynamic state vector
    let mut x = vector![0.0, 1.0, 0.0, 0.2, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0];

    let xcon_box1 = BoxFixed::new()
            .with_lower(SVector::from_element(Some(-5.0)))
            .with_upper(SVector::from_element(Some(5.0)));

    let mut x_constraints = [
        &mut DynConstraint::new(&xcon_box1)
    ];

    let ucon_box1 = BoxFixed::new()
            .with_lower(SVector::from_element(Some(-0.4)))
            .with_upper(SVector::from_element(Some(0.4)));

    let mut u_constraints = [
        &mut DynConstraint::new(&ucon_box1)
    ];

    let mut total_iters = 0;
    for k in 0..100 {
        // Run solvers

        for i in 0..mpc.prediction_horizon_length() {
            let mut reference = SVector::zeros();
            reference[2] = ((i + k) as Float / 10.0).sin();
            xref.set_column(i, &reference);
        }

        let (reason, mut u) = mpc.solve(
            x,
            Some(&xref),
            None,
            Some(&mut x_constraints),
            Some(&mut u_constraints),
        );
        println!(
            "At step {k:3} in {:4} iterations, got tracking error : {:05.4} - {:?} with u:{:?}",
            mpc.get_num_iters(),
            (x - xref.column(0)).norm(),
            reason,
            u
        );

        // Iterate simulation
        ucon_box1.project(&mut u);
        x = A * x + B * u;

        total_iters += mpc.get_num_iters();
    }

    println!("Total iterations: {total_iters}");
}

pub static K: SMatrix<Float, 4, 12> = matrix![
    -0.1131651, 0.0804349, 1.2891591, -0.3933755, -0.5924539, -2.5576673, -0.0885719, 0.0612491, 0.5438439, -0.0355682, -0.0570154, -0.5522377;
    0.1079494, 0.0311034, 1.2891591, -0.1027003, 0.5690238, 2.5574092, 0.0847269, 0.0206449, 0.5438439, -0.0049179, 0.0550856, 0.5519773;
    0.0028796, -0.0363306, 1.2891591, 0.1261700, -0.0756569, -2.5561006, -0.0033242, -0.0244975, 0.5438439, 0.0068503, -0.0147863, -0.5512313;
    0.0023362, -0.0752077, 1.2891591, 0.3699059, 0.0990870, 2.5563587, 0.0071693, -0.0573965, 0.5438439, 0.0336359, 0.0167160, 0.5514916
];

pub static P: SMatrix<Float, 12, 12> = matrix![
    1542.3620564, -0.2580837, -0.0000000, 1.1105663, 1299.4507594, 17.2503454, 437.8595030, -0.1904147, -0.0000000, 0.0771823, 14.7132685, 2.6899147;
    -0.2580837, 1541.8513994, -0.0000000, -1297.2441085, -1.1105778, -6.8996289, -0.1904156, 437.4818451, 0.0000000, -14.5599331, -0.0771835, -1.0758960;
    -0.0000000, -0.0000000, 885.9046714, 0.0000000, -0.0000000, -0.0000000, -0.0000000, -0.0000000, 74.7159753, -0.0000000, -0.0000000, -0.0000000;
    1.1105663, -1297.2441085, 0.0000000, 4887.6852669, 5.6086128, 37.3859869, 0.8718046, -888.4130773, -0.0000000, 57.7207548, 0.4493830, 6.4604041;
    1299.4507594, -1.1105778, -0.0000000, 5.6086128, 4898.9334870, 93.4688410, 890.1530523, -0.8718090, -0.0000000, 0.4493817, 58.6258449, 16.1514679;
    17.2503454, -6.8996289, -0.0000000, 37.3859869, 93.4688410, 3494.0354062, 13.8693079, -5.5473978, -0.0000000, 3.2600215, 8.1502590, 153.1645212;
    437.8595030, -0.1904156, -0.0000000, 0.8718046, 890.1530523, 13.8693079, 248.9416157, -0.1440668, -0.0000000, 0.0633741, 10.3204552, 2.2347043;
    -0.1904147, 437.4818451, -0.0000000, -888.4130773, -0.8718090, -5.5473978, -0.1440668, 248.6549585, 0.0000000, -10.1937790, -0.0633746, -0.8938386;
    0.0000000, -0.0000000, 74.7159753, 0.0000000, -0.0000000, -0.0000000, -0.0000000, -0.0000000, 34.1517347, -0.0000000, -0.0000000, -0.0000000;
    0.0771823, -14.5599331, -0.0000000, 57.7207548, 0.4493817, 3.2600215, 0.0633741, -10.1937790, -0.0000000, 7.7498781, 0.0461173, 0.6846635;
    14.7132685, -0.0771835, -0.0000000, 0.4493830, 58.6258449, 8.1502590, 10.3204552, -0.0633746, -0.0000000, 0.0461173, 7.8436250, 1.7116687;
    2.6899147, -1.0758960, -0.0000000, 6.4604041, 16.1514679, 153.1645212, 2.2347043, -0.8938386, -0.0000000, 0.6846635, 1.7116687, 35.6329664
];

pub static A: SMatrix<Float, 12, 12> = matrix![
    1.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0245250, 0.0000000, 0.0500000, 0.0000000, 0.0000000, 0.0000000, 0.0002044, 0.0000000;
    0.0000000, 1.0000000, 0.0000000, -0.0245250, 0.0000000, 0.0000000, 0.0000000, 0.0500000, 0.0000000, -0.0002044, 0.0000000, 0.0000000;
    0.0000000, 0.0000000, 1.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0500000, 0.0000000, 0.0000000, 0.0000000;
    0.0000000, 0.0000000, 0.0000000, 1.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0250000, 0.0000000, 0.0000000;
    0.0000000, 0.0000000, 0.0000000, 0.0000000, 1.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0250000, 0.0000000;
    0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 1.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0250000;
    0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.9810000, 0.0000000, 1.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0122625, 0.0000000;
    0.0000000, 0.0000000, 0.0000000, -0.9810000, 0.0000000, 0.0000000, 0.0000000, 1.0000000, 0.0000000, -0.0122625, 0.0000000, 0.0000000;
    0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 1.0000000, 0.0000000, 0.0000000, 0.0000000;
    0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 1.0000000, 0.0000000, 0.0000000;
    0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 1.0000000, 0.0000000;
    0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 1.0000000
];

pub static B: SMatrix<Float, 12, 4> = matrix![
    -0.0007069, 0.0007773, 0.0007091, -0.0007795;
    0.0007034, 0.0007747, -0.0007042, -0.0007739;
    0.0052554, 0.0052554, 0.0052554, 0.0052554;
    -0.1720966, -0.1895213, 0.1722891, 0.1893288;
    -0.1729419, 0.1901740, 0.1734809, -0.1907131;
    0.0123423, -0.0045148, -0.0174024, 0.0095748;
    -0.0565520, 0.0621869, 0.0567283, -0.0623632;
    0.0562756, 0.0619735, -0.0563386, -0.0619105;
    0.2102143, 0.2102143, 0.2102143, 0.2102143;
    -13.7677303, -15.1617018, 13.7831318, 15.1463003;
    -13.8353509, 15.2139209, 13.8784751, -15.2570451;
    0.9873856, -0.3611820, -1.3921880, 0.7659845
];

pub static Q: SVector<Float, 12> = vector! {100.0000000, 100.0000000, 100.0000000, 4.0000000, 4.0000000, 400.0000000, 4.0000000, 4.0000000, 4.0000000, 2.0408163, 2.0408163, 4.0000000};

pub static R: SVector<Float, 4> = vector! {4.0000000, 4.0000000, 4.0000000, 4.0000000};

pub static RHO: Float = 8.0;
